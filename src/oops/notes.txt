1) Static Binding: 
		-> The binding which can be resolved at compile time by compiler is known as static or early binding. 
		   Binding of all the static, private and final methods is done at compile-time.
		   
2) Dynamic Binding: 
		-> In Dynamic binding compiler doesn’t decide the method to be called. 
		   Overriding is a perfect example of dynamic binding. In overriding both parent and child classes have same method.
		   
		   
3) Method Overloading:
	-> Method Overloading is a Compile time polymorphism. 
	In method overloading, more than one method shares the same method name with different signature in the class. 
	In method overloading, return type can or can not be be same, but we must have to change the parameter because in java, 
	we can not achieve the method overloading by changing only the return type of the method.
	

4) Method Overriding:
	-> Method Overriding is a Run time polymorphism. 
	In method overriding, derived class provides the specific implementation of the method that is already provided by the 
	base class or parent class. 
	In method overriding, return type must be same or co-variant (return type may vary in same direction as the derived class).
	
	
5) In inheritance, subclass acquires super class properties. An important point to note is, when subclass object is created, 
a separate object of super class object will not be created. Only a subclass object is created that has super class variables.

This situation is different from a normal assumption that a constructor call means an object of the class is created, 
so we can’t blindly say that whenever a class constructor is executed, object of that class is created or not.	


6) Declaring a class as final implicitly declares all of its methods as final, too.
It is illegal to declare a class as both abstract and final since an abstract class is incomplete by itself and relies upon 
its subclasses to provide complete implementations.

7) There is an error at the line “super.super.print();”. 
In Java, a class cannot directly access the grandparent’s members. 
It is allowed in C++ though. 
In C++, we can use scope resolution operator (::) to access any ancestor’s member in the inheritance hierarchy. 
In Java, we can access grandparent’s members only through the parent class. 


8) Why doesn’t java allow accessing grandparent’s methods? 
	-> It violates encapsulation. 
	   You shouldn’t be able to bypass the parent class’s behavior. 
	   It makes sense to sometimes be able to bypass your own class’s behavior (particularly from within the same method) 
	   but not your parent’s. 


9) The Base class reference ‘obj’ refers to a derived class object (see expression “Base obj = new Derived()”). 
When fun() is called on obj, the call is made according to the type of referred object, not according to the reference.


10) Is Overiding possible with private methods?
If we observe our output, then it is clear that the method fun() has not been overriden. 
It is so because private methods are bonded during compile time and it is the type of the reference variable – not the type 
of object that it refers to – that determines what method to be called..
As a side note, private methods may be performance-wise better (compared to non-private and non-final methods) 
due to static binding.


11) The reference variable of the Parent class is capable to hold its object reference as well as its child object reference.



